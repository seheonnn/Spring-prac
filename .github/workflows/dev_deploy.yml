name: UMC Dev CI/CD

on:
  pull_request:
    types: [ closed ]
  push:
    branches:
      - main
  workflow_dispatch: # (2).수동 실행도 가능하도록

jobs:
  build:
    runs-on: ubuntu-latest # (3).OS환경
    #    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'

    steps:
      - name: Checkout
        uses: actions/checkout@v2 # (4).코드 check out (현재 디렉토리의 최상단, 즉 .github 디렉토리 이하의 level 을 기준으로) + 다른 레포지토리에서 코드를 가져올 수도 있음

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17 # (5).자바 설치
          distribution: 'adopt'

      - name: Convert to dev YML
        run: |
          cd ./src/main/resources
          [ -e "application.yml" ] && rm application.yml
          echo "spring:" > application.yml
          echo "  profiles:" >> application.yml
          echo "    active: dev" >> application.yml
          
          echo "  servlet:" >> application.yml
          echo "    multipart:" >> application.yml
          echo "      max-file-size: 200MB" >> application.yml
          echo "      max-request-size: 200MB" >> application.yml

      - name: Set dev.yml
        uses: microsoft/variable-substitution@v1
        with:
          files: ./src/main/resources/application-dev.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USER }}
          spring.datasource.password: ${{ secrets.DB_PW }}

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash # (6).권한 부여

      - name: Build with Gradle
        run: ./gradlew clean build -x test
        shell: bash # (7).build시작

      # Docker image Build (1)
      - name: Docker image build
        run: docker build -t seheon/beanstalk-docker:latest --pull --no-cache --platform linux/amd64 .

      # DockerHub Login (2)
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Docker Hub push (3)
      - name: Docker Hub push
        run: docker push seheon/beanstalk-docker:latest

      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00" # (8).build시점의 시간확보

      - name: Show Current Time
        run: echo "CurrentTime=$"
        shell: bash # (9).확보한 시간 보여주기

      #      - name: Generate deployment package
      #        run: |
      #          mkdir -p deploy
      #          cp build/libs/*.jar deploy/application.jar
      #          cp Procfile deploy/Procfile
      #          cp -r .ebextensions-dev deploy/.ebextensions
      #          cp -r .platform deploy/.platform
      #          cd deploy && zip -r deploy.zip .

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACTION_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_ACTION_SECRET_ACCESS_KEY }}
          application_name: project-prod-sponus # 원하는 어플 이름 (빈스톡 애플리케이션 이름)
          environment_name: Project-prod-sponus-env # 원하는 환경 이름 (빈스톡 이름)
          version_label: github-action-${{ steps.current-time.outputs.formattedTime }}
          region: ap-northeast-2
          source_bundle: seheon/beanstalk-docker:latest
          #          deployment_package: deploy/deploy.zip
          wait_for_deployment: false
